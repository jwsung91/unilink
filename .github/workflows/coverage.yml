name: Code Coverage

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  coverage:
    name: Code Coverage Analysis
    runs-on: ubuntu-22.04

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          cmake \
          libboost-dev \
          libboost-system-dev \
          lcov

    - name: Configure with coverage
      run: |
        cmake -S . -B build-coverage \
          -DCMAKE_BUILD_TYPE=Debug \
          -DCMAKE_CXX_FLAGS="--coverage -fprofile-arcs -ftest-coverage" \
          -DCMAKE_C_FLAGS="--coverage -fprofile-arcs -ftest-coverage" \
          -DCMAKE_EXE_LINKER_FLAGS="--coverage" \
          -DUNILINK_ENABLE_CONFIG=ON \
          -DUNILINK_ENABLE_PERFORMANCE_TESTS=ON \
          -DBUILD_TESTING=ON \
          -DBUILD_EXAMPLES=OFF

    - name: Build with coverage
      run: cmake --build build-coverage -j $(nproc)

    - name: Run tests
      run: |
        cd build-coverage
        ctest --output-on-failure --parallel $(nproc)

    - name: Generate coverage report
      run: |
        cd build-coverage
        
        # Capture coverage data
        lcov --directory . --capture --output-file coverage.info
        
        # Debug: Show total coverage before filtering
        echo "=== Before filtering ==="
        lcov --summary coverage.info 2>&1 | grep lines
        
        # Step 1: Extract unilink directory using absolute path
        echo "=== Step 1: Extract unilink directory ==="
        lcov --extract coverage.info \
          "${GITHUB_WORKSPACE}/unilink/*" \
          --output-file coverage_temp.info \
          --ignore-errors mismatch,negative,unused
        lcov --summary coverage_temp.info 2>&1 | grep lines
        
        # Step 2: Remove unwanted files (test, _deps, build)
        echo "=== Step 2: Remove test and dependency files ==="
        lcov --remove coverage_temp.info \
          "*/test/*" \
          "*/_deps/*" \
          "*/build-coverage/*" \
          --output-file coverage_filtered.info \
          --ignore-errors mismatch,negative,unused
        
        # Debug: Show coverage after filtering
        echo "=== After filtering ==="
        lcov --summary coverage_filtered.info 2>&1 | grep lines
        
        # Debug: Show filtered files
        echo "=== Filtered files (first 30) ==="
        lcov --list coverage_filtered.info 2>&1 | head -30
        
        # Generate summary
        lcov --list coverage_filtered.info > coverage_summary.txt
        
        # Generate HTML report
        genhtml coverage_filtered.info --output-directory coverage_html \
          --title "unilink Coverage Report" \
          --legend --show-details

    - name: Calculate coverage percentage
      id: coverage
      run: |
        cd build-coverage
        COVERAGE=$(lcov --summary coverage_filtered.info 2>&1 | grep "lines" | awk '{print $2}' | sed 's/%//')
        echo "percentage=$COVERAGE" >> $GITHUB_OUTPUT
        echo "### 📊 Code Coverage: ${COVERAGE}%" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        cat coverage_summary.txt | tail -20 >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

    - name: Upload HTML Coverage Report
      uses: actions/upload-artifact@v5
      with:
        name: coverage-report
        path: build-coverage/coverage_html
        retention-days: 30
        overwrite: true

    - name: Upload Coverage Data
      uses: actions/upload-artifact@v5
      with:
        name: coverage-data
        path: |
          build-coverage/coverage_filtered.info
          build-coverage/coverage_summary.txt
        retention-days: 30
        overwrite: true

    - name: Comment PR with Coverage
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v8
      with:
        script: |
          const fs = require('fs');
          const coverageFile = 'build-coverage/coverage_summary.txt';
          const coverage = fs.readFileSync(coverageFile, 'utf8');
          const percentage = '${{ steps.coverage.outputs.percentage }}';
          
          const body = `## 📊 Code Coverage Report
          
          **Overall Coverage: ${percentage}%**
          
          <details>
          <summary>📋 Detailed Coverage</summary>
          
          \`\`\`
          ${coverage.split('\n').slice(-20).join('\n')}
          \`\`\`
          
          </details>
          
          💡 Download the full HTML report from the [Actions artifacts](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          `;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: body
          });

    - name: Coverage Check
      run: |
        cd build-coverage
        COVERAGE=$(lcov --summary coverage_filtered.info 2>&1 | grep "lines" | awk '{print $2}' | sed 's/%//')
        echo "Coverage: ${COVERAGE}%"
        
        # Set minimum coverage threshold (adjust as needed)
        THRESHOLD=65
        
        if (( $(echo "$COVERAGE < $THRESHOLD" | bc -l) )); then
          echo "❌ Coverage ${COVERAGE}% is below threshold ${THRESHOLD}%"
          exit 1
        else
          echo "✅ Coverage ${COVERAGE}% meets threshold ${THRESHOLD}%"
        fi

